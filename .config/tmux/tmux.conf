set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'catppuccin/tmux'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'sainnhe/tmux-fzf'

set-option -sa terminal-overrides ',tmux-256color:RGB'
setenv -g COLORTERM truecolor
set-option -g focus-events on
set -g default-terminal 'tmux-256color'
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
set -s extended-keys on
set -as terminal-features 'xterm*:extkeys'

set-option -g focus-events on
set-option -g renumber-windows on
set -s escape-time 0
setw -g mouse on
set -g status-right-length 250
set -g history-limit 30000


# set-window-option -g mode-keys vi

set -g @catppuccin_flavour 'macchiato'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '15'

unbind C-b
set-option -g prefix C-a

# Unbind the existing bindings
unbind-key w # we bind window management later
unbind-key q 
unbind-key t # we bind tab management later
unbind-key d
unbind-key C-z
unbind-key p # we have custom action to go to the previous

# for neovim to restore sessions
# set -g @resurrect-strategy-nvim 'session'
# set -g @resurrect-save 'S-s'
set -g @resurrect-restore 'S-r'
# we don't use these keys so we want to make them free
unbind-key C-r # restoring
unbind C-r
# unbind C-s
# unbind-key C-s

bind r source-file ~/.config/tmux/tmux.conf

bind-key m display-popup -w 80% -E "navi --print"

bind-key 'C-d' detach-client
# Swap the bindings
bind-key q choose-window

### Pane headers
set -g base-index 1
setw -g pane-base-index 1
set -g pane-border-format "#{?pane_active,#[reverse],}#{pane_index}#[default] #(sleep 0.5; ps -t #{pane_tty} -o args= | head -n 2 | sed -E -e 's@/opt/homebrew/Cellar/yarn/[0-9]+\.[0-9]+\.[0-9]+/libexec/bin/yarn.js@yarn@' -e 's@/path/to/npm/executable@npm@')"

set pane-active-border-style "fg=#c6a0f6"
set pane-border-style "fg=#654f80"

set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_current_text "#W"
# Auto hide pane-border-status line when only one pane is displayed (see tmux/tmux#566)
set-hook -g 'after-new-session'  'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
# we will set command to hide pane
set-hook -g pane-focus-in "run-shell '~/.config/tmux/neovim_hide_pane.sh'"
set-hook -g after-split-window "run-shell '~/.config/tmux/neovim_hide_pane.sh'"
###

bind-key S setw synchronize-panes


set-window-option -g mode-keys vi
# vim-mode copy/paste
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind y copy-mode 

bind c new-window -c "#{pane_current_path}"
bind u split-window -p 30 -c "#{pane_current_path}"
bind i split-window -p 50 -h -c "#{pane_current_path}"

bind w display-panes
bind -r C-Tab last-window
bind -n 'C-S-h' previous-window
bind -n 'C-S-l' next-window
bind -n 'C-S-n' previous-window
bind -n 'C-S-o' next-window

# bind-key C-e run-shell "~/.config/tmux/neovim_edit.sh"

bind-key -r F display-popup -E "sh ~/.config/scripts/tmux-sessionizer"
# bind-key -r C-e display-popup "sh ~/.config/tmux/worktrees '#{pane_current_path}'"
bind-key -r C-e display-popup -d "#{pane_current_path}" "sh ~/.config/tmux/worktrees.sh"
# bind-key -r C-e display-popup -d "#{pane_current_path}" ""

### VIM
# Vim doesn't differentiate <C-I> from <Tab> and <C-M> from <CR>.
# To have custom bindings for <C-I> and <C-M> we map them to F8 and F7
# F8 means <C-I> => \x1b[18~ 
# F7 means <C-M>
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" { send-keys C-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'C-n' if-shell "$is_vim" { send-keys C-n } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'C-Left' if-shell "$is_vim" { send-keys C-Left } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }

bind-key -n 'C-j' if-shell "$is_vim" { send-keys C-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'C-e' if-shell "$is_vim" { send-keys C-e } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'C-Down' if-shell "$is_vim" { send-keys C-Down } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }

bind-key -n 'C-k' if-shell "$is_vim" { send-keys C-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }


bind-key -n 'F8' if-shell "$is_vim" { send-keys F8 } {  if-shell -F '#{pane_at_top}' {} { select-pane -U } }
# bind-key -n 'C-i' if-shell "$is_vim" { send-keys Escape '\x1b[18~' } {  if-shell -F '#{pane_at_top}' {} { select-pane -U } }
bind-key -n 'C-Up' if-shell "$is_vim" { send-keys C-Up } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }

bind-key -n 'C-l' if-shell "$is_vim" { send-keys C-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }
bind-key -n 'C-o' if-shell "$is_vim" { send-keys C-o } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }
bind-key -n 'C-Right' if-shell "$is_vim" { send-keys C-Right } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }
# https://github.com/christoomey/vim-tmux-navigator?tab=readme-ov-file#restoring-clear-screen-c-l
bind C-l send-keys 'C-l'

# bind-key -n 'C-p' if-shell "$is_vim" { send-keys C-p } { if-shell 'test $(tmux list-panes | wc -l) -gt 1' 'last-pane' 'last-window' }
###


bind-key -n C-0 select-window -t :0
bind-key -n C-1 select-window -t :1
bind-key -n C-2 select-window -t :2
bind-key -n C-3 select-window -t :3
bind-key -n C-4 select-window -t :4
bind-key -n C-5 select-window -t :5
bind-key -n C-6 select-window -t :6
bind-key -n C-7 select-window -t :7
bind-key -n C-8 select-window -t :8
bind-key -n C-9 select-window -t :9

bind-key -T copy-mode-vi 'C-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'C-n' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'C-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'C-e' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'C-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'F8' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'C-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }
bind-key -T copy-mode-vi 'C-o' if-shell -F '#{pane_at_right}'  {} { select-pane -R }

TMUX_FZF_LAUNCH_KEY="C-f"
TMUX_FZF_PREVIEW_OPTIONS="--preview-window=top:wrap --bind 'ctrl-d:preview-page-down,ctrl-u:preview-page-up'"
# we modify session.sh script from tmux-fzf to sort session by last accessed date
# (tmux list-sessions -F '#S: [#{window_name}] #{pane_current_command} #{session_last_attached}' | grep -v "^$current_session: " | awk '{print $0 " | " $(NF)}' | sort -t '|' -k2,2nr | while IFS='|' read -r line last_attached; do
# 	session_info=$(echo $line | awk '{$NF=""; print $0}')
# 	last_attached_date=$(date -r "$last_attached" "+%Y-%m-%d %H:%M:%S")
# 	echo "$session_info [$last_attached_date]"
# done
# fzf session format doesnt work because our modification
# TMUX_FZF_SESSION_FORMAT="[#{window_name}] #{pane_current_command}"
TMUX_FZF_OPTIONS="-p -w 90% -h 80% -m"
bind-key -r f run-shell -b "~/.config/tmux/plugins/tmux-fzf/scripts/session.sh switch"

# Windows(panes) bindings
bind-key -T prefix w switch-client -T window_table
bind-key -T prefix 'C-w' switch-client -T window_table
bind-key -T window_table p last-pane; switch-client -T root
bind-key -T window_table w last-pane; switch-client -T root
bind-key -T window_table g display-panes
bind-key -T window_table q switch-client -T root
bind-key -T window_table d kill-pane
bind-key -T window_table t kill-pane -a
# vertical and horizontal split are swapped in tmux
bind-key -T window_table h split-window -v
bind-key -T window_table v split-window -h
# we mostly want to create vertical windows(panes)
bind-key -T window_table c split-window -h

bind-key -T window_table l select-layout -n

bind-key -r -T window_table Left resize-pane -L 1
bind-key -r -T window_table Down resize-pane -D 1
bind-key -r -T window_table Up resize-pane -U 1
bind-key -r -T window_table Right resize-pane -R 1

bind-key -r -T window_table n resize-pane -L 1
bind-key -r -T window_table e resize-pane -D 1
bind-key -r -T window_table i resize-pane -U 1
bind-key -r -T window_table o resize-pane -R 1
bind-key -r -T window_table 1 select-pane -t :.1
bind-key -r -T window_table 2 select-pane -t :.2
bind-key -r -T window_table 3 select-pane -t :.3
bind-key -r -T window_table 4 select-pane -t :.4
bind-key -r -T window_table 5 select-pane -t :.5
bind-key -r -T window_table 6 select-pane -t :.6
bind-key -r -T window_table 7 select-pane -t :.7
bind-key -r -T window_table 8 select-pane -t :.8
bind-key -r -T window_table 9 select-pane -t :.9
  
# Tabs bindings
bind-key -T prefix t switch-client -T tab_table
bind-key -T prefix 'C-t' switch-client -T tab_table
bind-key -T tab_table p last-window
bind-key -T tab_table t last-window
bind-key -T tab_table c new-window -a
bind-key -T tab_table d kill-window
bind-key -T tab_table q switch-client -T root
bind-key -T tab_table r command-prompt "rename-window '%%'"


## probably we dont neeed it \/
# bind-key -T prefix g switch-client -T root

# open splits and windows in the current folder
bind p if-shell 'test $(tmux list-panes | wc -l) -gt 1' 'last-pane' 'last-window'
# bind-key 'C-p' switch-client -l
# bind-key 'C-p' run-shell -b 'tmux switch-client -t $(tmux list-sessions -F "#{session_name}:#{session_last_attached}" | grep -v "^\\(dotfiles\\|notes\\):" | sort -t: -k2 -nr | awk "NR==2 {print \$1}" | cut -d: -f1)'
# bind-key 'C-p' run-shell  'echo $(tmux list-sessions -F "#{session_name}:#{session_last_attached}" | grep -v "^\\(dotfiles\\|notes\\):" | sort -t: -k2 -nr | awk "NR==2 {print \$1}" | cut -d: -f1)'
# bind-key 'C-p' run-shell  'echo $(tmux list-sessions | grep -v "^\\(dotfiles\\|notes\\):")'

bind-key 'C-p' run-shell "~/.config/tmux/last_session.sh"
bind-key -n 'C-q' run-shell "~/.config/tmux/close_session.sh"
  
# kitty scrollback - waiting for the stable release
# bind [ run-shell 'kitty @ kitten /Users/niba/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --env "TMUX=$TMUX" --env "TMUX_PANE=#{pane_id}"'

set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.config/tmux/plugins/'

run '~/.config/tmux/plugins/tpm/tpm'

bind-key g display-popup -E -h 90% -w 90% -d '#{pane_current_path}' "lazygit || true"
# bind-key e display-popup -E -d '#{pane_current_path}' -e 'TEST_SESSION=#S'  -w 95% -h 95% "tmux attach -t dotfiles"
bind-key e switch-client -t dotfiles
# bind-key e display-popup -E -d '#{pane_current_path}' -e 'TEST_SESSION=#S' -w 90% -h 90% "if [[ '#{session_name}' != 'dotfiles' ]]; then tmux attach -t dotfiles; fi"
# bind-key n display-popup -E -d '#{pane_current_path}' -e 'TEST_SESSION=#S'  -w 95% -h 95% "tmux attach -t notes"
bind-key n switch-client -t notes
# bind-key e display-popup -d '#{pane_current_path}' -e 'TEST_SESSION=#S' -w 90% -h 90% "tmux attach -t NVIM_POPUP -e TEST_SESSION=#S || tmux new -s NVIM_POPUP -e TEST_SESSION=#S nvim"
# bind-key g display-popup -d '#{pane_current_path}' -w 80% -h 80% -E "tmux attach -t NVIM_POPUP || tmux new -s NVIM_POPUP nvim"
display-message "Tmux reloaded"
